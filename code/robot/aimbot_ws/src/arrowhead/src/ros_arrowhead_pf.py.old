#!/usr/bin/env python3
import rospy
import threading
import pathfinding

from arm_control.srv import *

class Coordinate:
	def __init__(self, x, y):
		self.x = x
		self.y = y
		
	def direction(self, other):
		dx = other.x - self.x
		dy = other.y - self.y
		
		
def pathfind(src, dst):
	p=[[src]]
	while p:
		x = p.pop(0)
		j = nodes.index(x[-1])
		if nodes[j] == dst:
			print("Path found:", x)
			break
		for i, e in enumerate(nodes):
			if graph[j][i] and e not in x:
				p.append(x + [e])
            
#Okej vad vill jag ha...
#Funktion som tar in nuvarande och n√§sta qr och from_dir. Skickar ut left, right, forward eller back            
            

# In this example a = (0,0), b = (0,1), c = (1,0), d = (1,1)

#In adjacency matrix format
graph=  [#a,b,c,d
		 [0,3,1,0],  #a
		 [3,0,0,0],  #b
		 [1,0,0,3],  #c
		 [0,0,3,0],  #d
]

nodes=['(0,0)','(0,1)','(1,0)','(1,1)']
a=input('Source Destination = ')
b=input('Destination = ')
pathfind(a,b)





def get_keyboard_input():
      while(True):
        inp = input("type something ")
        if inp == "follow":
            pass
        elif inp == "forward":
            pass
        elif inp == "left":
            pass
        elif inp == "right":
            pass
        elif inp == "back":
            pass
        elif inp == "pickup":
            pass
        print("key: " + inp)
        if(inp == "quit"):
            return
        self.n = int(inp)

def arrowhead_spoof(request):
    qr_data = request
    print(qr_data)
    inp = input("arrowhead input requested. What to do? ")
    # sry for ugly
    print("key: " + inp)
    return inp
    


#if __name__ == '__main__':
  #  rospy.init_node('arrowhead', anonymous=True)

    #x = threading.Thread(target=get_keyboard_input)
    #x.start()
    #x.join()
   # rospy.Service('ah_req', ah_request, arrowhead_spoof)
  #  rospy.spin()
